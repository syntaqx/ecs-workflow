name: Continuous Deployment

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECS_CLUSTER: ecs-workflow-example-cluster

jobs:

  build:
    uses: ./.github/workflows/docker.yml
    with:
      push: true
    secrets: inherit

  deploy:
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
    -
      name: Checkout
      uses: actions/checkout@v3
    -
      name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2 # More information on this action can be found below in the 'AWS Credentials' section
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    -
      name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    -
      name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names ${{ github.event.repository.name }} || aws ecr create-repository --repository-name ${{ github.event.repository.name }}
    -
      name: Tag and push Docker Image to ECR
      run: |
        docker pull ${{ needs.build.outputs.image }}
        docker tag ${{ needs.build.outputs.image }} ${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}
    -
      name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: .aws/task-definition.json
        container-name: ${{ github.event.repository.name }}
        image: ${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}
    -
      name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ github.event.repository.name }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
